#pragma version 11
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "owner" "whitelisted" 0x151f7c75 "total_minted" "asa_id" "max_supply"
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txn NumAppArgs
    bz main_bare_routing@16
    pushbytess 0x9479ff63 0x317f1bbd 0x6a6db3ab 0xfd5d7073 0x8768a684 0xd00d76b9 0x22e4c5a0 0xb773c59f 0xeb11aa78 0x9ffd3e53 0x55d9525b // method "create(uint64,uint64)void", method "addToWhitelist(account)void", method "removeFromWhitelist(account)void", method "mint(account,uint64)void", method "validateTransfer(account,account,uint64)bool", method "checkWhitelist(account)uint64", method "get_total_minted()uint64", method "get_max_supply()uint64", method "updateOwner(account)void", method "optInToAsset()void", method "fundContract(uint64)void"
    txna ApplicationArgs 0
    match main_create_route@3 main_addToWhitelist_route@4 main_removeFromWhitelist_route@5 main_mint_route@6 main_validateTransfer_route@7 main_checkWhitelist_route@8 main_get_total_minted_route@9 main_get_max_supply_route@10 main_updateOwner_route@11 main_optInToAsset_route@12 main_fundContract_route@13

main_after_if_else@20:
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    intc_0 // 0
    return

main_fundContract_route@13:
    // smart_contracts/asa_controller/contract.algo.ts:156
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/asa_controller/contract.algo.ts:156
    // @abimethod()
    callsub fundContract
    intc_1 // 1
    return

main_optInToAsset_route@12:
    // smart_contracts/asa_controller/contract.algo.ts:139
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub optInToAsset
    intc_1 // 1
    return

main_updateOwner_route@11:
    // smart_contracts/asa_controller/contract.algo.ts:130
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/asa_controller/contract.algo.ts:130
    // @abimethod()
    callsub updateOwner
    intc_1 // 1
    return

main_get_max_supply_route@10:
    // smart_contracts/asa_controller/contract.algo.ts:122
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_max_supply
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_total_minted_route@9:
    // smart_contracts/asa_controller/contract.algo.ts:117
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub get_total_minted
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_checkWhitelist_route@8:
    // smart_contracts/asa_controller/contract.algo.ts:109
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/asa_controller/contract.algo.ts:109
    // @abimethod()
    callsub checkWhitelist
    itob
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_validateTransfer_route@7:
    // smart_contracts/asa_controller/contract.algo.ts:94
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    txna ApplicationArgs 3
    btoi
    // smart_contracts/asa_controller/contract.algo.ts:94
    // @abimethod()
    callsub validateTransfer
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_2 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_mint_route@6:
    // smart_contracts/asa_controller/contract.algo.ts:64
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    btoi
    // smart_contracts/asa_controller/contract.algo.ts:64
    // @abimethod()
    callsub mint
    intc_1 // 1
    return

main_removeFromWhitelist_route@5:
    // smart_contracts/asa_controller/contract.algo.ts:55
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/asa_controller/contract.algo.ts:55
    // @abimethod()
    callsub removeFromWhitelist
    intc_1 // 1
    return

main_addToWhitelist_route@4:
    // smart_contracts/asa_controller/contract.algo.ts:46
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/asa_controller/contract.algo.ts:46
    // @abimethod()
    callsub addToWhitelist
    intc_1 // 1
    return

main_create_route@3:
    // smart_contracts/asa_controller/contract.algo.ts:30
    // @abimethod({ onCreate: "require" })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    // smart_contracts/asa_controller/contract.algo.ts:30
    // @abimethod({ onCreate: "require" })
    callsub create
    intc_1 // 1
    return

main_bare_routing@16:
    // smart_contracts/asa_controller/contract.algo.ts:16-17
    // @contract({ name: "FinalASAController", avmVersion: 11, stateTotals: { globalUints: 4, localUints: 1 } })
    // export class SmartASAController extends Contract {
    txn OnCompletion
    switch main_after_if_else@20 main_optIn@17
    b main_after_if_else@20

main_optIn@17:
    // smart_contracts/asa_controller/contract.algo.ts:38
    // @baremethod({ allowActions: ["OptIn"] })
    txn ApplicationID
    assert // can only call when not creating
    callsub optIn
    intc_1 // 1
    return


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.create(assetId: uint64, maxSupply: uint64) -> void:
create:
    // smart_contracts/asa_controller/contract.algo.ts:30-31
    // @abimethod({ onCreate: "require" })
    // public create(assetId: uint64, maxSupply: uint64): void {
    proto 2 0
    // smart_contracts/asa_controller/contract.algo.ts:22
    // ASA_ID = GlobalState<uint64>({ key: "asa_id" });
    bytec 4 // "asa_id"
    // smart_contracts/asa_controller/contract.algo.ts:32
    // this.ASA_ID.value = assetId;
    frame_dig -2
    app_global_put
    // smart_contracts/asa_controller/contract.algo.ts:20
    // MAX_SUPPLY = GlobalState<uint64>({ key: "max_supply" });
    bytec 5 // "max_supply"
    // smart_contracts/asa_controller/contract.algo.ts:33
    // this.MAX_SUPPLY.value = maxSupply;
    frame_dig -1
    app_global_put
    // smart_contracts/asa_controller/contract.algo.ts:19
    // TOTAL_MINTED = GlobalState<uint64>({ key: "total_minted" });
    bytec_3 // "total_minted"
    // smart_contracts/asa_controller/contract.algo.ts:34
    // this.TOTAL_MINTED.value = 0;
    intc_0 // 0
    app_global_put
    // smart_contracts/asa_controller/contract.algo.ts:21
    // OWNER = GlobalState<Account>({ key: "owner" });
    bytec_0 // "owner"
    // smart_contracts/asa_controller/contract.algo.ts:35
    // this.OWNER.value = Txn.sender;
    txn Sender
    app_global_put
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.optIn() -> void:
optIn:
    // smart_contracts/asa_controller/contract.algo.ts:41
    // this.WHITELISTED(Txn.sender).value = 0;
    txn Sender
    // smart_contracts/asa_controller/contract.algo.ts:25
    // WHITELISTED = LocalState<uint64>({ key: "whitelisted" });
    bytec_1 // "whitelisted"
    // smart_contracts/asa_controller/contract.algo.ts:41
    // this.WHITELISTED(Txn.sender).value = 0;
    intc_0 // 0
    app_local_put
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.addToWhitelist(account: bytes) -> void:
addToWhitelist:
    // smart_contracts/asa_controller/contract.algo.ts:46-47
    // @abimethod()
    // public addToWhitelist(account: Account): void {
    proto 1 0
    // smart_contracts/asa_controller/contract.algo.ts:48
    // assert(Txn.sender === this.OWNER.value, "Only owner can add to whitelist");
    txn Sender
    // smart_contracts/asa_controller/contract.algo.ts:21
    // OWNER = GlobalState<Account>({ key: "owner" });
    intc_0 // 0
    bytec_0 // "owner"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:48
    // assert(Txn.sender === this.OWNER.value, "Only owner can add to whitelist");
    ==
    assert // Only owner can add to whitelist
    // smart_contracts/asa_controller/contract.algo.ts:49
    // this.WHITELISTED(account).value = 1;
    frame_dig -1
    // smart_contracts/asa_controller/contract.algo.ts:25
    // WHITELISTED = LocalState<uint64>({ key: "whitelisted" });
    bytec_1 // "whitelisted"
    // smart_contracts/asa_controller/contract.algo.ts:49
    // this.WHITELISTED(account).value = 1;
    intc_1 // 1
    app_local_put
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.removeFromWhitelist(account: bytes) -> void:
removeFromWhitelist:
    // smart_contracts/asa_controller/contract.algo.ts:55-56
    // @abimethod()
    // public removeFromWhitelist(account: Account): void {
    proto 1 0
    // smart_contracts/asa_controller/contract.algo.ts:57
    // assert(Txn.sender === this.OWNER.value, "Only owner can remove from whitelist");
    txn Sender
    // smart_contracts/asa_controller/contract.algo.ts:21
    // OWNER = GlobalState<Account>({ key: "owner" });
    intc_0 // 0
    bytec_0 // "owner"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:57
    // assert(Txn.sender === this.OWNER.value, "Only owner can remove from whitelist");
    ==
    assert // Only owner can remove from whitelist
    // smart_contracts/asa_controller/contract.algo.ts:58
    // this.WHITELISTED(account).value = 0;
    frame_dig -1
    // smart_contracts/asa_controller/contract.algo.ts:25
    // WHITELISTED = LocalState<uint64>({ key: "whitelisted" });
    bytec_1 // "whitelisted"
    // smart_contracts/asa_controller/contract.algo.ts:58
    // this.WHITELISTED(account).value = 0;
    intc_0 // 0
    app_local_put
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.mint(recipient: bytes, amount: uint64) -> void:
mint:
    // smart_contracts/asa_controller/contract.algo.ts:64-65
    // @abimethod()
    // public mint(recipient: Account, amount: uint64): void {
    proto 2 0
    // smart_contracts/asa_controller/contract.algo.ts:67
    // assert(Txn.sender === this.OWNER.value, "Only owner can mint");
    txn Sender
    // smart_contracts/asa_controller/contract.algo.ts:21
    // OWNER = GlobalState<Account>({ key: "owner" });
    intc_0 // 0
    bytec_0 // "owner"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:67
    // assert(Txn.sender === this.OWNER.value, "Only owner can mint");
    ==
    assert // Only owner can mint
    // smart_contracts/asa_controller/contract.algo.ts:70
    // assert(this.WHITELISTED(recipient).value === 1, "Recipient not whitelisted");
    frame_dig -2
    intc_0 // 0
    // smart_contracts/asa_controller/contract.algo.ts:25
    // WHITELISTED = LocalState<uint64>({ key: "whitelisted" });
    bytec_1 // "whitelisted"
    // smart_contracts/asa_controller/contract.algo.ts:70
    // assert(this.WHITELISTED(recipient).value === 1, "Recipient not whitelisted");
    app_local_get_ex
    assert // check LocalState exists
    intc_1 // 1
    ==
    assert // Recipient not whitelisted
    // smart_contracts/asa_controller/contract.algo.ts:19
    // TOTAL_MINTED = GlobalState<uint64>({ key: "total_minted" });
    intc_0 // 0
    bytec_3 // "total_minted"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:73
    // const newTotal: uint64 = this.TOTAL_MINTED.value + amount;
    frame_dig -1
    +
    // smart_contracts/asa_controller/contract.algo.ts:20
    // MAX_SUPPLY = GlobalState<uint64>({ key: "max_supply" });
    intc_0 // 0
    bytec 5 // "max_supply"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:74
    // assert(newTotal <= this.MAX_SUPPLY.value, "Would exceed max supply");
    dig 1
    >=
    assert // Would exceed max supply
    // smart_contracts/asa_controller/contract.algo.ts:19
    // TOTAL_MINTED = GlobalState<uint64>({ key: "total_minted" });
    bytec_3 // "total_minted"
    // smart_contracts/asa_controller/contract.algo.ts:77
    // this.TOTAL_MINTED.value = newTotal;
    swap
    app_global_put
    // smart_contracts/asa_controller/contract.algo.ts:81-88
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.ASA_ID.value,
    //     assetReceiver: recipient,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/asa_controller/contract.algo.ts:22
    // ASA_ID = GlobalState<uint64>({ key: "asa_id" });
    intc_0 // 0
    bytec 4 // "asa_id"
    app_global_get_ex
    assert // check GlobalState exists
    frame_dig -1
    itxn_field AssetAmount
    frame_dig -2
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/asa_controller/contract.algo.ts:81-87
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.ASA_ID.value,
    //     assetReceiver: recipient,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/asa_controller/contract.algo.ts:86
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/asa_controller/contract.algo.ts:81-88
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.ASA_ID.value,
    //     assetReceiver: recipient,
    //     assetAmount: amount,
    //     fee: 0,
    //   })
    //   .submit();
    itxn_submit
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.validateTransfer(from: bytes, to: bytes, amount: uint64) -> uint64:
validateTransfer:
    // smart_contracts/asa_controller/contract.algo.ts:94-95
    // @abimethod()
    // public validateTransfer(from: Account, to: Account, amount: uint64): boolean {
    proto 3 1
    // smart_contracts/asa_controller/contract.algo.ts:97
    // const isWhitelisted = this.WHITELISTED(to).value === 1;
    frame_dig -2
    intc_0 // 0
    // smart_contracts/asa_controller/contract.algo.ts:25
    // WHITELISTED = LocalState<uint64>({ key: "whitelisted" });
    bytec_1 // "whitelisted"
    // smart_contracts/asa_controller/contract.algo.ts:97
    // const isWhitelisted = this.WHITELISTED(to).value === 1;
    app_local_get_ex
    assert // check LocalState exists
    intc_1 // 1
    ==
    // smart_contracts/asa_controller/contract.algo.ts:98
    // assert(isWhitelisted, "Recipient must be whitelisted");
    assert // Recipient must be whitelisted
    // smart_contracts/asa_controller/contract.algo.ts:103
    // return true;
    intc_1 // 1
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.checkWhitelist(account: bytes) -> uint64:
checkWhitelist:
    // smart_contracts/asa_controller/contract.algo.ts:109-110
    // @abimethod()
    // public checkWhitelist(account: Account): uint64 {
    proto 1 1
    // smart_contracts/asa_controller/contract.algo.ts:111
    // return this.WHITELISTED(account).value;
    frame_dig -1
    intc_0 // 0
    // smart_contracts/asa_controller/contract.algo.ts:25
    // WHITELISTED = LocalState<uint64>({ key: "whitelisted" });
    bytec_1 // "whitelisted"
    // smart_contracts/asa_controller/contract.algo.ts:111
    // return this.WHITELISTED(account).value;
    app_local_get_ex
    assert // check LocalState exists
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.get_total_minted() -> uint64:
get_total_minted:
    // smart_contracts/asa_controller/contract.algo.ts:19
    // TOTAL_MINTED = GlobalState<uint64>({ key: "total_minted" });
    intc_0 // 0
    bytec_3 // "total_minted"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:119
    // return this.TOTAL_MINTED.value;
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.get_max_supply() -> uint64:
get_max_supply:
    // smart_contracts/asa_controller/contract.algo.ts:20
    // MAX_SUPPLY = GlobalState<uint64>({ key: "max_supply" });
    intc_0 // 0
    bytec 5 // "max_supply"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:124
    // return this.MAX_SUPPLY.value;
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.updateOwner(newOwner: bytes) -> void:
updateOwner:
    // smart_contracts/asa_controller/contract.algo.ts:130-131
    // @abimethod()
    // public updateOwner(newOwner: Account): void {
    proto 1 0
    // smart_contracts/asa_controller/contract.algo.ts:132
    // assert(Txn.sender === this.OWNER.value, "Only current owner can update owner");
    txn Sender
    // smart_contracts/asa_controller/contract.algo.ts:21
    // OWNER = GlobalState<Account>({ key: "owner" });
    intc_0 // 0
    bytec_0 // "owner"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:132
    // assert(Txn.sender === this.OWNER.value, "Only current owner can update owner");
    ==
    assert // Only current owner can update owner
    // smart_contracts/asa_controller/contract.algo.ts:21
    // OWNER = GlobalState<Account>({ key: "owner" });
    bytec_0 // "owner"
    // smart_contracts/asa_controller/contract.algo.ts:133
    // this.OWNER.value = newOwner;
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.optInToAsset() -> void:
optInToAsset:
    // smart_contracts/asa_controller/contract.algo.ts:143-150
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.ASA_ID.value,
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    //   .submit();
    itxn_begin
    // smart_contracts/asa_controller/contract.algo.ts:22
    // ASA_ID = GlobalState<uint64>({ key: "asa_id" });
    intc_0 // 0
    bytec 4 // "asa_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:146
    // assetReceiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/asa_controller/contract.algo.ts:147
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    itxn_field AssetReceiver
    itxn_field XferAsset
    // smart_contracts/asa_controller/contract.algo.ts:143-149
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.ASA_ID.value,
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/asa_controller/contract.algo.ts:148
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/asa_controller/contract.algo.ts:143-150
    // itxn
    //   .assetTransfer({
    //     xferAsset: this.ASA_ID.value,
    //     assetReceiver: Global.currentApplicationAddress,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    //   .submit();
    itxn_submit
    retsub


// smart_contracts/asa_controller/contract.algo.ts::SmartASAController.fundContract(amount: uint64) -> void:
fundContract:
    // smart_contracts/asa_controller/contract.algo.ts:156-157
    // @abimethod()
    // public fundContract(amount: uint64): void {
    proto 1 0
    // smart_contracts/asa_controller/contract.algo.ts:158
    // assert(Txn.sender === this.OWNER.value, "Only owner can fund contract");
    txn Sender
    // smart_contracts/asa_controller/contract.algo.ts:21
    // OWNER = GlobalState<Account>({ key: "owner" });
    intc_0 // 0
    bytec_0 // "owner"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/asa_controller/contract.algo.ts:158
    // assert(Txn.sender === this.OWNER.value, "Only owner can fund contract");
    ==
    assert // Only owner can fund contract
    retsub
