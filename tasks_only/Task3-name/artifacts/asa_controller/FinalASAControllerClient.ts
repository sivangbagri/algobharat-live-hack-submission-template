/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"FinalASAController","structs":{},"methods":[{"name":"create","args":[{"type":"uint64","name":"assetId"},{"type":"uint64","name":"maxSupply"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Create the contract with ASA ID and max supply","events":[],"recommendations":{}},{"name":"addToWhitelist","args":[{"type":"account","name":"account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add an account to the whitelist (only owner)","events":[],"recommendations":{}},{"name":"removeFromWhitelist","args":[{"type":"account","name":"account"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove an account from the whitelist (only owner)","events":[],"recommendations":{}},{"name":"mint","args":[{"type":"account","name":"recipient"},{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Mint tokens to a whitelisted recipient","events":[],"recommendations":{}},{"name":"validateTransfer","args":[{"type":"account","name":"from"},{"type":"account","name":"to"},{"type":"uint64","name":"amount"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Validate if a transfer should be allowed","events":[],"recommendations":{}},{"name":"checkWhitelist","args":[{"type":"account","name":"account"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Check if an account is whitelisted","events":[],"recommendations":{}},{"name":"get_total_minted","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get contract information","events":[],"recommendations":{}},{"name":"get_max_supply","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"updateOwner","args":[{"type":"account","name":"newOwner"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update contract owner (only current owner)","events":[],"recommendations":{}},{"name":"optInToAsset","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Opt the contract into the ASA (needed for holding tokens)","events":[],"recommendations":{}},{"name":"fundContract","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Fund contract with ASA tokens for minting","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":4,"bytes":1},"local":{"ints":1,"bytes":0}},"keys":{"global":{"TOTAL_MINTED":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfbWludGVk"},"MAX_SUPPLY":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X3N1cHBseQ=="},"OWNER":{"keyType":"AVMString","valueType":"address","key":"b3duZXI="},"ASA_ID":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNhX2lk"}},"local":{"WHITELISTED":{"keyType":"AVMString","valueType":"AVMUint64","key":"d2hpdGVsaXN0ZWQ="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":["OptIn"]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[156,172,184,202,219,236,259,298,320,338,356],"errorMessage":"OnCompletion is not NoOp"},{"pc":[562],"errorMessage":"Only current owner can update owner"},{"pc":[430],"errorMessage":"Only owner can add to whitelist"},{"pc":[601],"errorMessage":"Only owner can fund contract"},{"pc":[464],"errorMessage":"Only owner can mint"},{"pc":[447],"errorMessage":"Only owner can remove from whitelist"},{"pc":[528],"errorMessage":"Recipient must be whitelisted"},{"pc":[473],"errorMessage":"Recipient not whitelisted"},{"pc":[489],"errorMessage":"Would exceed max supply"},{"pc":[360],"errorMessage":"can only call when creating"},{"pc":[159,175,187,205,222,239,262,301,323,341,387],"errorMessage":"can only call when not creating"},{"pc":[428,445,462,477,485,498,544,550,560,573,599],"errorMessage":"check GlobalState exists"},{"pc":[470,525,539],"errorMessage":"check LocalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CyADAAEEJgYFb3duZXILd2hpdGVsaXN0ZWQEFR98dQx0b3RhbF9taW50ZWQGYXNhX2lkCm1heF9zdXBwbHkxG0EBM4ILBJR5/2MEMX8bvQRqbbOrBP1dcHMEh2imhATQDXa5BCLkxaAEt3PFnwTrEap4BJ/9PlMEVdlSWzYaAI4LAMoAuACmAJAAaQBSAEEAMAAeABIAAiJDMRkURDEYRDYaAReIAagjQzEZFEQxGESIAYUjQzEZFEQxGEQ2GgEXwByIAWMjQzEZFEQxGESIAVEWKkxQsCNDMRkURDEYRIgBOxYqTFCwI0MxGRREMRhENhoBF8AciAEaFipMULAjQzEZFEQxGEQ2GgEXwBw2GgIXwBw2GgMXiADrgAEAIk8CVCpMULAjQzEZFEQxGEQ2GgEXwBw2GgIXiACLI0MxGRREMRhENhoBF8AciABoI0MxGRREMRhENhoBF8AciABFI0MxGRREMRgURDYaARc2GgIXiAAVI0MxGY0C/xkAA0L/FjEYRIgAFyNDigIAJwSL/mcnBYv/ZysiZygxAGeJMQApImaJigEAMQAiKGVEEkSL/ykjZomKAQAxACIoZUQSRIv/KSJmiYoCADEAIihlRBJEi/4iKWNEIxJEIitlRIv/CCInBWVESwEPRCtMZ7EiJwRlRIv/shKL/rIUshEkshAisgGziYoDAYv+IiljRCMSRCOJigEBi/8iKWNEiSIrZUSJIicFZUSJigEAMQAiKGVEEkQoi/9nibEiJwRlRDIKIrISshSyESSyECKyAbOJigEAMQAiKGVEEkSJ","clear":"C4EBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the FinalAsaController contract
 */
export type FinalAsaControllerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(uint64,uint64)void': {
      assetId: bigint | number
      maxSupply: bigint | number
    }
    'addToWhitelist(account)void': {
      account: Uint8Array | string
    }
    'removeFromWhitelist(account)void': {
      account: Uint8Array | string
    }
    'mint(account,uint64)void': {
      recipient: Uint8Array | string
      amount: bigint | number
    }
    'validateTransfer(account,account,uint64)bool': {
      from: Uint8Array | string
      to: Uint8Array | string
      amount: bigint | number
    }
    'checkWhitelist(account)uint64': {
      account: Uint8Array | string
    }
    'get_total_minted()uint64': Record<string, never>
    'get_max_supply()uint64': Record<string, never>
    'updateOwner(account)void': {
      newOwner: Uint8Array | string
    }
    'optInToAsset()void': Record<string, never>
    'fundContract(uint64)void': {
      amount: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(uint64,uint64)void': [assetId: bigint | number, maxSupply: bigint | number]
    'addToWhitelist(account)void': [account: Uint8Array | string]
    'removeFromWhitelist(account)void': [account: Uint8Array | string]
    'mint(account,uint64)void': [recipient: Uint8Array | string, amount: bigint | number]
    'validateTransfer(account,account,uint64)bool': [from: Uint8Array | string, to: Uint8Array | string, amount: bigint | number]
    'checkWhitelist(account)uint64': [account: Uint8Array | string]
    'get_total_minted()uint64': []
    'get_max_supply()uint64': []
    'updateOwner(account)void': [newOwner: Uint8Array | string]
    'optInToAsset()void': []
    'fundContract(uint64)void': [amount: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type FinalAsaControllerReturns = {
  'create(uint64,uint64)void': void
  'addToWhitelist(account)void': void
  'removeFromWhitelist(account)void': void
  'mint(account,uint64)void': void
  'validateTransfer(account,account,uint64)bool': boolean
  'checkWhitelist(account)uint64': bigint
  'get_total_minted()uint64': bigint
  'get_max_supply()uint64': bigint
  'updateOwner(account)void': void
  'optInToAsset()void': void
  'fundContract(uint64)void': void
}

/**
 * Defines the types of available calls and state of the FinalAsaController smart contract.
 */
export type FinalAsaControllerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(uint64,uint64)void' | 'create', {
      argsObj: FinalAsaControllerArgs['obj']['create(uint64,uint64)void']
      argsTuple: FinalAsaControllerArgs['tuple']['create(uint64,uint64)void']
      returns: FinalAsaControllerReturns['create(uint64,uint64)void']
    }>
    & Record<'addToWhitelist(account)void' | 'addToWhitelist', {
      argsObj: FinalAsaControllerArgs['obj']['addToWhitelist(account)void']
      argsTuple: FinalAsaControllerArgs['tuple']['addToWhitelist(account)void']
      returns: FinalAsaControllerReturns['addToWhitelist(account)void']
    }>
    & Record<'removeFromWhitelist(account)void' | 'removeFromWhitelist', {
      argsObj: FinalAsaControllerArgs['obj']['removeFromWhitelist(account)void']
      argsTuple: FinalAsaControllerArgs['tuple']['removeFromWhitelist(account)void']
      returns: FinalAsaControllerReturns['removeFromWhitelist(account)void']
    }>
    & Record<'mint(account,uint64)void' | 'mint', {
      argsObj: FinalAsaControllerArgs['obj']['mint(account,uint64)void']
      argsTuple: FinalAsaControllerArgs['tuple']['mint(account,uint64)void']
      returns: FinalAsaControllerReturns['mint(account,uint64)void']
    }>
    & Record<'validateTransfer(account,account,uint64)bool' | 'validateTransfer', {
      argsObj: FinalAsaControllerArgs['obj']['validateTransfer(account,account,uint64)bool']
      argsTuple: FinalAsaControllerArgs['tuple']['validateTransfer(account,account,uint64)bool']
      returns: FinalAsaControllerReturns['validateTransfer(account,account,uint64)bool']
    }>
    & Record<'checkWhitelist(account)uint64' | 'checkWhitelist', {
      argsObj: FinalAsaControllerArgs['obj']['checkWhitelist(account)uint64']
      argsTuple: FinalAsaControllerArgs['tuple']['checkWhitelist(account)uint64']
      returns: FinalAsaControllerReturns['checkWhitelist(account)uint64']
    }>
    & Record<'get_total_minted()uint64' | 'get_total_minted', {
      argsObj: FinalAsaControllerArgs['obj']['get_total_minted()uint64']
      argsTuple: FinalAsaControllerArgs['tuple']['get_total_minted()uint64']
      returns: FinalAsaControllerReturns['get_total_minted()uint64']
    }>
    & Record<'get_max_supply()uint64' | 'get_max_supply', {
      argsObj: FinalAsaControllerArgs['obj']['get_max_supply()uint64']
      argsTuple: FinalAsaControllerArgs['tuple']['get_max_supply()uint64']
      returns: FinalAsaControllerReturns['get_max_supply()uint64']
    }>
    & Record<'updateOwner(account)void' | 'updateOwner', {
      argsObj: FinalAsaControllerArgs['obj']['updateOwner(account)void']
      argsTuple: FinalAsaControllerArgs['tuple']['updateOwner(account)void']
      returns: FinalAsaControllerReturns['updateOwner(account)void']
    }>
    & Record<'optInToAsset()void' | 'optInToAsset', {
      argsObj: FinalAsaControllerArgs['obj']['optInToAsset()void']
      argsTuple: FinalAsaControllerArgs['tuple']['optInToAsset()void']
      returns: FinalAsaControllerReturns['optInToAsset()void']
    }>
    & Record<'fundContract(uint64)void' | 'fundContract', {
      argsObj: FinalAsaControllerArgs['obj']['fundContract(uint64)void']
      argsTuple: FinalAsaControllerArgs['tuple']['fundContract(uint64)void']
      returns: FinalAsaControllerReturns['fundContract(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalMinted: bigint
        maxSupply: bigint
        owner: string
        asaId: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        whitelisted: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FinalAsaControllerSignatures = keyof FinalAsaControllerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FinalAsaControllerNonVoidMethodSignatures = keyof FinalAsaControllerTypes['methods'] extends infer T ? T extends keyof FinalAsaControllerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FinalAsaController smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FinalAsaControllerSignatures> = FinalAsaControllerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FinalAsaController smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FinalAsaControllerSignatures> = FinalAsaControllerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = FinalAsaControllerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = FinalAsaControllerTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FinalAsaControllerCreateCallParams =
  | Expand<CallParams<FinalAsaControllerArgs['obj']['create(uint64,uint64)void'] | FinalAsaControllerArgs['tuple']['create(uint64,uint64)void']> & {method: 'create'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<FinalAsaControllerArgs['obj']['create(uint64,uint64)void'] | FinalAsaControllerArgs['tuple']['create(uint64,uint64)void']> & {method: 'create(uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FinalAsaControllerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FinalAsaControllerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FinalAsaController smart contract
 */
export abstract class FinalAsaControllerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends FinalAsaControllerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create':
          case 'create(uint64,uint64)void':
            return FinalAsaControllerParamsFactory.create.create(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the FinalASAController smart contract using the create(uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      create(params: CallParams<FinalAsaControllerArgs['obj']['create(uint64,uint64)void'] | FinalAsaControllerArgs['tuple']['create(uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create(uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.maxSupply],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the addToWhitelist(account)void ABI method
   *
   * Add an account to the whitelist (only owner)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addToWhitelist(params: CallParams<FinalAsaControllerArgs['obj']['addToWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['addToWhitelist(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addToWhitelist(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the removeFromWhitelist(account)void ABI method
   *
   * Remove an account from the whitelist (only owner)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeFromWhitelist(params: CallParams<FinalAsaControllerArgs['obj']['removeFromWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['removeFromWhitelist(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeFromWhitelist(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the mint(account,uint64)void ABI method
   *
   * Mint tokens to a whitelisted recipient
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mint(params: CallParams<FinalAsaControllerArgs['obj']['mint(account,uint64)void'] | FinalAsaControllerArgs['tuple']['mint(account,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint(account,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.recipient, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the validateTransfer(account,account,uint64)bool ABI method
   *
   * Validate if a transfer should be allowed
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static validateTransfer(params: CallParams<FinalAsaControllerArgs['obj']['validateTransfer(account,account,uint64)bool'] | FinalAsaControllerArgs['tuple']['validateTransfer(account,account,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'validateTransfer(account,account,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the checkWhitelist(account)uint64 ABI method
   *
   * Check if an account is whitelisted
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkWhitelist(params: CallParams<FinalAsaControllerArgs['obj']['checkWhitelist(account)uint64'] | FinalAsaControllerArgs['tuple']['checkWhitelist(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'checkWhitelist(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the get_total_minted()uint64 ABI method
   *
   * Get contract information
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotalMinted(params: CallParams<FinalAsaControllerArgs['obj']['get_total_minted()uint64'] | FinalAsaControllerArgs['tuple']['get_total_minted()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_total_minted()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the get_max_supply()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMaxSupply(params: CallParams<FinalAsaControllerArgs['obj']['get_max_supply()uint64'] | FinalAsaControllerArgs['tuple']['get_max_supply()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_max_supply()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the updateOwner(account)void ABI method
   *
   * Update contract owner (only current owner)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateOwner(params: CallParams<FinalAsaControllerArgs['obj']['updateOwner(account)void'] | FinalAsaControllerArgs['tuple']['updateOwner(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateOwner(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newOwner],
    }
  }
  /**
   * Constructs a no op call for the optInToAsset()void ABI method
   *
   * Opt the contract into the ASA (needed for holding tokens)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<FinalAsaControllerArgs['obj']['optInToAsset()void'] | FinalAsaControllerArgs['tuple']['optInToAsset()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsset()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the fundContract(uint64)void ABI method
   *
   * Fund contract with ASA tokens for minting
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundContract(params: CallParams<FinalAsaControllerArgs['obj']['fundContract(uint64)void'] | FinalAsaControllerArgs['tuple']['fundContract(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fundContract(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FinalASAController smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FinalAsaControllerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FinalAsaControllerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FinalAsaControllerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FinalAsaControllerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FinalASAController smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FinalAsaControllerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? FinalAsaControllerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (FinalAsaControllerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new FinalAsaControllerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FinalASAController smart contract using the create(uint64,uint64)void ABI method.
       *
       * Create the contract with ASA ID and max supply
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      create: (params: CallParams<FinalAsaControllerArgs['obj']['create(uint64,uint64)void'] | FinalAsaControllerArgs['tuple']['create(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(FinalAsaControllerParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FinalASAController smart contract using the create(uint64,uint64)void ABI method.
       *
       * Create the contract with ASA ID and max supply
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      create: (params: CallParams<FinalAsaControllerArgs['obj']['create(uint64,uint64)void'] | FinalAsaControllerArgs['tuple']['create(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(FinalAsaControllerParamsFactory.create.create(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FinalASAController smart contract using an ABI method call using the create(uint64,uint64)void ABI method.
       *
       * Create the contract with ASA ID and max supply
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      create: async (params: CallParams<FinalAsaControllerArgs['obj']['create(uint64,uint64)void'] | FinalAsaControllerArgs['tuple']['create(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(FinalAsaControllerParamsFactory.create.create(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | FinalAsaControllerReturns['create(uint64,uint64)void']) }, appClient: new FinalAsaControllerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FinalASAController smart contract
 */
export class FinalAsaControllerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FinalAsaControllerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FinalAsaController app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FinalAsaControllerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FinalAsaControllerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FinalAsaControllerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FinalAsaControllerClient> {
    return new FinalAsaControllerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FinalAsaControllerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FinalAsaControllerClient> {
    return new FinalAsaControllerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the FinalASAController smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the FinalASAController smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `addToWhitelist(account)void` ABI method.
     *
     * Add an account to the whitelist (only owner)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addToWhitelist: (params: CallParams<FinalAsaControllerArgs['obj']['addToWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['addToWhitelist(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.addToWhitelist(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `removeFromWhitelist(account)void` ABI method.
     *
     * Remove an account from the whitelist (only owner)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeFromWhitelist: (params: CallParams<FinalAsaControllerArgs['obj']['removeFromWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['removeFromWhitelist(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.removeFromWhitelist(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `mint(account,uint64)void` ABI method.
     *
     * Mint tokens to a whitelisted recipient
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mint: (params: CallParams<FinalAsaControllerArgs['obj']['mint(account,uint64)void'] | FinalAsaControllerArgs['tuple']['mint(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.mint(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `validateTransfer(account,account,uint64)bool` ABI method.
     *
     * Validate if a transfer should be allowed
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    validateTransfer: (params: CallParams<FinalAsaControllerArgs['obj']['validateTransfer(account,account,uint64)bool'] | FinalAsaControllerArgs['tuple']['validateTransfer(account,account,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.validateTransfer(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `checkWhitelist(account)uint64` ABI method.
     *
     * Check if an account is whitelisted
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkWhitelist: (params: CallParams<FinalAsaControllerArgs['obj']['checkWhitelist(account)uint64'] | FinalAsaControllerArgs['tuple']['checkWhitelist(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.checkWhitelist(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `get_total_minted()uint64` ABI method.
     *
     * Get contract information
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotalMinted: (params: CallParams<FinalAsaControllerArgs['obj']['get_total_minted()uint64'] | FinalAsaControllerArgs['tuple']['get_total_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.getTotalMinted(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `get_max_supply()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMaxSupply: (params: CallParams<FinalAsaControllerArgs['obj']['get_max_supply()uint64'] | FinalAsaControllerArgs['tuple']['get_max_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.getMaxSupply(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `updateOwner(account)void` ABI method.
     *
     * Update contract owner (only current owner)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateOwner: (params: CallParams<FinalAsaControllerArgs['obj']['updateOwner(account)void'] | FinalAsaControllerArgs['tuple']['updateOwner(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.updateOwner(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA (needed for holding tokens)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<FinalAsaControllerArgs['obj']['optInToAsset()void'] | FinalAsaControllerArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `fundContract(uint64)void` ABI method.
     *
     * Fund contract with ASA tokens for minting
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    fundContract: (params: CallParams<FinalAsaControllerArgs['obj']['fundContract(uint64)void'] | FinalAsaControllerArgs['tuple']['fundContract(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FinalAsaControllerParamsFactory.fundContract(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the FinalASAController smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the FinalASAController smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `addToWhitelist(account)void` ABI method.
     *
     * Add an account to the whitelist (only owner)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addToWhitelist: (params: CallParams<FinalAsaControllerArgs['obj']['addToWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['addToWhitelist(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.addToWhitelist(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `removeFromWhitelist(account)void` ABI method.
     *
     * Remove an account from the whitelist (only owner)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeFromWhitelist: (params: CallParams<FinalAsaControllerArgs['obj']['removeFromWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['removeFromWhitelist(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.removeFromWhitelist(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `mint(account,uint64)void` ABI method.
     *
     * Mint tokens to a whitelisted recipient
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mint: (params: CallParams<FinalAsaControllerArgs['obj']['mint(account,uint64)void'] | FinalAsaControllerArgs['tuple']['mint(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.mint(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `validateTransfer(account,account,uint64)bool` ABI method.
     *
     * Validate if a transfer should be allowed
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    validateTransfer: (params: CallParams<FinalAsaControllerArgs['obj']['validateTransfer(account,account,uint64)bool'] | FinalAsaControllerArgs['tuple']['validateTransfer(account,account,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.validateTransfer(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `checkWhitelist(account)uint64` ABI method.
     *
     * Check if an account is whitelisted
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkWhitelist: (params: CallParams<FinalAsaControllerArgs['obj']['checkWhitelist(account)uint64'] | FinalAsaControllerArgs['tuple']['checkWhitelist(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.checkWhitelist(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `get_total_minted()uint64` ABI method.
     *
     * Get contract information
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotalMinted: (params: CallParams<FinalAsaControllerArgs['obj']['get_total_minted()uint64'] | FinalAsaControllerArgs['tuple']['get_total_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.getTotalMinted(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `get_max_supply()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMaxSupply: (params: CallParams<FinalAsaControllerArgs['obj']['get_max_supply()uint64'] | FinalAsaControllerArgs['tuple']['get_max_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.getMaxSupply(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `updateOwner(account)void` ABI method.
     *
     * Update contract owner (only current owner)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateOwner: (params: CallParams<FinalAsaControllerArgs['obj']['updateOwner(account)void'] | FinalAsaControllerArgs['tuple']['updateOwner(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.updateOwner(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA (needed for holding tokens)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<FinalAsaControllerArgs['obj']['optInToAsset()void'] | FinalAsaControllerArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `fundContract(uint64)void` ABI method.
     *
     * Fund contract with ASA tokens for minting
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    fundContract: (params: CallParams<FinalAsaControllerArgs['obj']['fundContract(uint64)void'] | FinalAsaControllerArgs['tuple']['fundContract(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FinalAsaControllerParamsFactory.fundContract(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the FinalASAController smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The optIn result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.optIn(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the FinalASAController smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `addToWhitelist(account)void` ABI method.
     *
     * Add an account to the whitelist (only owner)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addToWhitelist: async (params: CallParams<FinalAsaControllerArgs['obj']['addToWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['addToWhitelist(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.addToWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['addToWhitelist(account)void'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `removeFromWhitelist(account)void` ABI method.
     *
     * Remove an account from the whitelist (only owner)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeFromWhitelist: async (params: CallParams<FinalAsaControllerArgs['obj']['removeFromWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['removeFromWhitelist(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.removeFromWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['removeFromWhitelist(account)void'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `mint(account,uint64)void` ABI method.
     *
     * Mint tokens to a whitelisted recipient
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mint: async (params: CallParams<FinalAsaControllerArgs['obj']['mint(account,uint64)void'] | FinalAsaControllerArgs['tuple']['mint(account,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.mint(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['mint(account,uint64)void'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `validateTransfer(account,account,uint64)bool` ABI method.
     *
     * Validate if a transfer should be allowed
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    validateTransfer: async (params: CallParams<FinalAsaControllerArgs['obj']['validateTransfer(account,account,uint64)bool'] | FinalAsaControllerArgs['tuple']['validateTransfer(account,account,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.validateTransfer(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['validateTransfer(account,account,uint64)bool'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `checkWhitelist(account)uint64` ABI method.
     *
     * Check if an account is whitelisted
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkWhitelist: async (params: CallParams<FinalAsaControllerArgs['obj']['checkWhitelist(account)uint64'] | FinalAsaControllerArgs['tuple']['checkWhitelist(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.checkWhitelist(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['checkWhitelist(account)uint64'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `get_total_minted()uint64` ABI method.
     *
     * Get contract information
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotalMinted: async (params: CallParams<FinalAsaControllerArgs['obj']['get_total_minted()uint64'] | FinalAsaControllerArgs['tuple']['get_total_minted()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.getTotalMinted(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['get_total_minted()uint64'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `get_max_supply()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMaxSupply: async (params: CallParams<FinalAsaControllerArgs['obj']['get_max_supply()uint64'] | FinalAsaControllerArgs['tuple']['get_max_supply()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.getMaxSupply(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['get_max_supply()uint64'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `updateOwner(account)void` ABI method.
     *
     * Update contract owner (only current owner)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateOwner: async (params: CallParams<FinalAsaControllerArgs['obj']['updateOwner(account)void'] | FinalAsaControllerArgs['tuple']['updateOwner(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.updateOwner(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['updateOwner(account)void'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA (needed for holding tokens)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<FinalAsaControllerArgs['obj']['optInToAsset()void'] | FinalAsaControllerArgs['tuple']['optInToAsset()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['optInToAsset()void'])}
    },

    /**
     * Makes a call to the FinalASAController smart contract using the `fundContract(uint64)void` ABI method.
     *
     * Fund contract with ASA tokens for minting
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    fundContract: async (params: CallParams<FinalAsaControllerArgs['obj']['fundContract(uint64)void'] | FinalAsaControllerArgs['tuple']['fundContract(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FinalAsaControllerParamsFactory.fundContract(params))
      return {...result, return: result.return as unknown as (undefined | FinalAsaControllerReturns['fundContract(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FinalAsaControllerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current FinalASAController app
   */
  state = {
    /**
     * Methods to access global state for the current FinalASAController app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalMinted: result.TOTAL_MINTED,
          maxSupply: result.MAX_SUPPLY,
          owner: result.OWNER,
          asaId: result.ASA_ID,
        }
      },
      /**
       * Get the current value of the TOTAL_MINTED key in global state
       */
      totalMinted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("TOTAL_MINTED")) as bigint | undefined },
      /**
       * Get the current value of the MAX_SUPPLY key in global state
       */
      maxSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("MAX_SUPPLY")) as bigint | undefined },
      /**
       * Get the current value of the OWNER key in global state
       */
      owner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("OWNER")) as string | undefined },
      /**
       * Get the current value of the ASA_ID key in global state
       */
      asaId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("ASA_ID")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current FinalASAController app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            whitelisted: result.WHITELISTED,
          }
        },
        /**
         * Get the current value of the WHITELISTED key in local state
         */
        whitelisted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("WHITELISTED")) as bigint | undefined },
      }
    },
  }

  public newGroup(): FinalAsaControllerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a addToWhitelist(account)void method call against the FinalASAController contract
       */
      addToWhitelist(params: CallParams<FinalAsaControllerArgs['obj']['addToWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['addToWhitelist(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addToWhitelist(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeFromWhitelist(account)void method call against the FinalASAController contract
       */
      removeFromWhitelist(params: CallParams<FinalAsaControllerArgs['obj']['removeFromWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['removeFromWhitelist(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeFromWhitelist(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a mint(account,uint64)void method call against the FinalASAController contract
       */
      mint(params: CallParams<FinalAsaControllerArgs['obj']['mint(account,uint64)void'] | FinalAsaControllerArgs['tuple']['mint(account,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mint(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a validateTransfer(account,account,uint64)bool method call against the FinalASAController contract
       */
      validateTransfer(params: CallParams<FinalAsaControllerArgs['obj']['validateTransfer(account,account,uint64)bool'] | FinalAsaControllerArgs['tuple']['validateTransfer(account,account,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.validateTransfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('validateTransfer(account,account,uint64)bool', v))
        return this
      },
      /**
       * Add a checkWhitelist(account)uint64 method call against the FinalASAController contract
       */
      checkWhitelist(params: CallParams<FinalAsaControllerArgs['obj']['checkWhitelist(account)uint64'] | FinalAsaControllerArgs['tuple']['checkWhitelist(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkWhitelist(params)))
        resultMappers.push((v) => client.decodeReturnValue('checkWhitelist(account)uint64', v))
        return this
      },
      /**
       * Add a get_total_minted()uint64 method call against the FinalASAController contract
       */
      getTotalMinted(params: CallParams<FinalAsaControllerArgs['obj']['get_total_minted()uint64'] | FinalAsaControllerArgs['tuple']['get_total_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotalMinted(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_total_minted()uint64', v))
        return this
      },
      /**
       * Add a get_max_supply()uint64 method call against the FinalASAController contract
       */
      getMaxSupply(params: CallParams<FinalAsaControllerArgs['obj']['get_max_supply()uint64'] | FinalAsaControllerArgs['tuple']['get_max_supply()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMaxSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_max_supply()uint64', v))
        return this
      },
      /**
       * Add a updateOwner(account)void method call against the FinalASAController contract
       */
      updateOwner(params: CallParams<FinalAsaControllerArgs['obj']['updateOwner(account)void'] | FinalAsaControllerArgs['tuple']['updateOwner(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateOwner(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToAsset()void method call against the FinalASAController contract
       */
      optInToAsset(params: CallParams<FinalAsaControllerArgs['obj']['optInToAsset()void'] | FinalAsaControllerArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a fundContract(uint64)void method call against the FinalASAController contract
       */
      fundContract(params: CallParams<FinalAsaControllerArgs['obj']['fundContract(uint64)void'] | FinalAsaControllerArgs['tuple']['fundContract(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundContract(params)))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppCall(client.params.optIn.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the FinalASAController contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FinalAsaControllerComposer
  }
}
export type FinalAsaControllerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the addToWhitelist(account)void ABI method.
   *
   * Add an account to the whitelist (only owner)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addToWhitelist(params?: CallParams<FinalAsaControllerArgs['obj']['addToWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['addToWhitelist(account)void']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['addToWhitelist(account)void'] | undefined]>

  /**
   * Calls the removeFromWhitelist(account)void ABI method.
   *
   * Remove an account from the whitelist (only owner)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeFromWhitelist(params?: CallParams<FinalAsaControllerArgs['obj']['removeFromWhitelist(account)void'] | FinalAsaControllerArgs['tuple']['removeFromWhitelist(account)void']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['removeFromWhitelist(account)void'] | undefined]>

  /**
   * Calls the mint(account,uint64)void ABI method.
   *
   * Mint tokens to a whitelisted recipient
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(params?: CallParams<FinalAsaControllerArgs['obj']['mint(account,uint64)void'] | FinalAsaControllerArgs['tuple']['mint(account,uint64)void']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['mint(account,uint64)void'] | undefined]>

  /**
   * Calls the validateTransfer(account,account,uint64)bool ABI method.
   *
   * Validate if a transfer should be allowed
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  validateTransfer(params?: CallParams<FinalAsaControllerArgs['obj']['validateTransfer(account,account,uint64)bool'] | FinalAsaControllerArgs['tuple']['validateTransfer(account,account,uint64)bool']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['validateTransfer(account,account,uint64)bool'] | undefined]>

  /**
   * Calls the checkWhitelist(account)uint64 ABI method.
   *
   * Check if an account is whitelisted
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkWhitelist(params?: CallParams<FinalAsaControllerArgs['obj']['checkWhitelist(account)uint64'] | FinalAsaControllerArgs['tuple']['checkWhitelist(account)uint64']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['checkWhitelist(account)uint64'] | undefined]>

  /**
   * Calls the get_total_minted()uint64 ABI method.
   *
   * Get contract information
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotalMinted(params?: CallParams<FinalAsaControllerArgs['obj']['get_total_minted()uint64'] | FinalAsaControllerArgs['tuple']['get_total_minted()uint64']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['get_total_minted()uint64'] | undefined]>

  /**
   * Calls the get_max_supply()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMaxSupply(params?: CallParams<FinalAsaControllerArgs['obj']['get_max_supply()uint64'] | FinalAsaControllerArgs['tuple']['get_max_supply()uint64']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['get_max_supply()uint64'] | undefined]>

  /**
   * Calls the updateOwner(account)void ABI method.
   *
   * Update contract owner (only current owner)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateOwner(params?: CallParams<FinalAsaControllerArgs['obj']['updateOwner(account)void'] | FinalAsaControllerArgs['tuple']['updateOwner(account)void']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['updateOwner(account)void'] | undefined]>

  /**
   * Calls the optInToAsset()void ABI method.
   *
   * Opt the contract into the ASA (needed for holding tokens)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<FinalAsaControllerArgs['obj']['optInToAsset()void'] | FinalAsaControllerArgs['tuple']['optInToAsset()void']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['optInToAsset()void'] | undefined]>

  /**
   * Calls the fundContract(uint64)void ABI method.
   *
   * Fund contract with ASA tokens for minting
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundContract(params?: CallParams<FinalAsaControllerArgs['obj']['fundContract(uint64)void'] | FinalAsaControllerArgs['tuple']['fundContract(uint64)void']>): FinalAsaControllerComposer<[...TReturns, FinalAsaControllerReturns['fundContract(uint64)void'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the FinalASAController smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): FinalAsaControllerComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the FinalASAController smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FinalAsaControllerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FinalAsaControllerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FinalAsaControllerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FinalAsaControllerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FinalAsaControllerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FinalAsaControllerComposerResults<TReturns>>
}
export type FinalAsaControllerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

