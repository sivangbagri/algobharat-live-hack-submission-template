{
    "name": "FinalASAController",
    "structs": {},
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetId"
                },
                {
                    "type": "uint64",
                    "name": "maxSupply"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Create the contract with ASA ID and max supply",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addToWhitelist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add an account to the whitelist (only owner)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeFromWhitelist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Remove an account from the whitelist (only owner)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "mint",
            "args": [
                {
                    "type": "account",
                    "name": "recipient"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Mint tokens to a whitelisted recipient",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "validateTransfer",
            "args": [
                {
                    "type": "account",
                    "name": "from"
                },
                {
                    "type": "account",
                    "name": "to"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Validate if a transfer should be allowed",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "checkWhitelist",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Check if an account is whitelisted",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_total_minted",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Get contract information",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_max_supply",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateOwner",
            "args": [
                {
                    "type": "account",
                    "name": "newOwner"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update contract owner (only current owner)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optInToAsset",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opt the contract into the ASA (needed for holding tokens)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fundContract",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Fund contract with ASA tokens for minting",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "TOTAL_MINTED": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxfbWludGVk"
                },
                "MAX_SUPPLY": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF4X3N1cHBseQ=="
                },
                "OWNER": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "b3duZXI="
                },
                "ASA_ID": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNhX2lk"
                }
            },
            "local": {
                "WHITELISTED": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "d2hpdGVsaXN0ZWQ="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": [
            "OptIn"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        156,
                        172,
                        184,
                        202,
                        219,
                        236,
                        259,
                        298,
                        320,
                        338,
                        356
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        562
                    ],
                    "errorMessage": "Only current owner can update owner"
                },
                {
                    "pc": [
                        430
                    ],
                    "errorMessage": "Only owner can add to whitelist"
                },
                {
                    "pc": [
                        601
                    ],
                    "errorMessage": "Only owner can fund contract"
                },
                {
                    "pc": [
                        464
                    ],
                    "errorMessage": "Only owner can mint"
                },
                {
                    "pc": [
                        447
                    ],
                    "errorMessage": "Only owner can remove from whitelist"
                },
                {
                    "pc": [
                        528
                    ],
                    "errorMessage": "Recipient must be whitelisted"
                },
                {
                    "pc": [
                        473
                    ],
                    "errorMessage": "Recipient not whitelisted"
                },
                {
                    "pc": [
                        489
                    ],
                    "errorMessage": "Would exceed max supply"
                },
                {
                    "pc": [
                        360
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        159,
                        175,
                        187,
                        205,
                        222,
                        239,
                        262,
                        301,
                        323,
                        341,
                        387
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        428,
                        445,
                        462,
                        477,
                        485,
                        498,
                        544,
                        550,
                        560,
                        573,
                        599
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        470,
                        525,
                        539
                    ],
                    "errorMessage": "check LocalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CyADAAEEJgYFb3duZXILd2hpdGVsaXN0ZWQEFR98dQx0b3RhbF9taW50ZWQGYXNhX2lkCm1heF9zdXBwbHkxG0EBM4ILBJR5/2MEMX8bvQRqbbOrBP1dcHMEh2imhATQDXa5BCLkxaAEt3PFnwTrEap4BJ/9PlMEVdlSWzYaAI4LAMoAuACmAJAAaQBSAEEAMAAeABIAAiJDMRkURDEYRDYaAReIAagjQzEZFEQxGESIAYUjQzEZFEQxGEQ2GgEXwByIAWMjQzEZFEQxGESIAVEWKkxQsCNDMRkURDEYRIgBOxYqTFCwI0MxGRREMRhENhoBF8AciAEaFipMULAjQzEZFEQxGEQ2GgEXwBw2GgIXwBw2GgMXiADrgAEAIk8CVCpMULAjQzEZFEQxGEQ2GgEXwBw2GgIXiACLI0MxGRREMRhENhoBF8AciABoI0MxGRREMRhENhoBF8AciABFI0MxGRREMRgURDYaARc2GgIXiAAVI0MxGY0C/xkAA0L/FjEYRIgAFyNDigIAJwSL/mcnBYv/ZysiZygxAGeJMQApImaJigEAMQAiKGVEEkSL/ykjZomKAQAxACIoZUQSRIv/KSJmiYoCADEAIihlRBJEi/4iKWNEIxJEIitlRIv/CCInBWVESwEPRCtMZ7EiJwRlRIv/shKL/rIUshEkshAisgGziYoDAYv+IiljRCMSRCOJigEBi/8iKWNEiSIrZUSJIicFZUSJigEAMQAiKGVEEkQoi/9nibEiJwRlRDIKIrISshSyESSyECKyAbOJigEAMQAiKGVEEkSJ",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}