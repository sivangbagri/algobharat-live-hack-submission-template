{
  "version": 3,
  "sources": [
    "C:/Users/91945/Desktop/hack-algo/projects/hack-algo-contracts/smart_contracts/asa_controller/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA4IG;;AAAA;AAAA;AAAA;;AAAA;AA5IH;;;AAAA;AA4IG;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAlHH;;;AAAA;AAAA;;AAkHG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA7FH;;;AAAA;AAAA;;AA6FG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA9EH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AA8EG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAhDH;;;AAAA;AAAA;;AAAA;;;AAAA;AAgDG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAvCH;;;AAAA;AAAA;;AAuCG;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA9BH;;;AAAA;AAAA;;AA8BG;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAdH;;;AAAA;AAAA;;;AAAA;AAcG;;;AAAA;;AAdH;;AAAA;;;;;;AAAA;;;AAsBG;;AAAA;AAAA;;;AAAA;;AARD;;;AARoC;;AAUlC;;AAAA;AAZsC;;AAatC;;AAAA;AAdwC;AAed;AAA1B;AAbkC;AAcX;;AAAvB;;AAMqB;;AAhBiB;AAgBD;AAArC;;AAKF;;;AAEa;;AA3BuB;AAAA;AAAA;AAAA;AA2B3B;AAAP;AACA;;AAxBsC;AAwBJ;AAAlC;;AAMF;;;AAEa;;AApCuB;AAAA;AAAA;AAAA;AAoC3B;AAAP;AACA;;AAjCsC;AAiCJ;AAAlC;;AAMF;;;AAGa;;AA9CuB;AAAA;AAAA;AAAA;AA8C3B;AAAP;AAGmC;;AAAA;AA7CG;AA6CH;AAAA;AAAU;AAAtC;AAAP;AAnDwC;AAAA;AAAA;AAAA;AAsDlC;;AAAmB;AArDa;AAAA;;AAAA;AAAA;AAsD/B;;AAAA;AAAP;AAvDwC;AA0DxC;AAAA;AAIA;AA3DkC;AAAA;;AAAA;AAAA;;;;;;;;;;;AA2DlC;;;AAKS;;;AALT;;AAaF;;;AAG6C;;AAAA;AAxEL;AAwEK;AAAA;AAAU;AAA/B;AACtB;AAKO;AAAP;AAMF;;;AAEmC;;AAAA;AAtFK;AAsFL;AAAA;AAAjC;AA5FwC;AAAA;AAAA;AAAA;AAoGxC;AAnGsC;AAAA;;AAAA;AAAA;AAwGtC;AAMF;;;AAEa;;AA/GuB;AAAA;AAAA;AAAA;AA+G3B;AAAP;AA/GkC;AAgHlC;;AAAA;;AAUA;AAzHkC;AAAA;;AAAA;AAAA;AA4HR;;AACT;;;;;;;AAJjB;;;AAKS;;;AALT;;AAaF;;;AAEa;;AAzIuB;AAAA;AAAA;AAAA;AAyI3B;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4"
    },
    "6": {
      "op": "bytecblock \"owner\" \"whitelisted\" 0x151f7c75 \"total_minted\" \"asa_id\" \"max_supply\""
    },
    "62": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "64": {
      "op": "bz main_bare_routing@16",
      "stack_out": []
    },
    "67": {
      "op": "pushbytess 0x9479ff63 0x317f1bbd 0x6a6db3ab 0xfd5d7073 0x8768a684 0xd00d76b9 0x22e4c5a0 0xb773c59f 0xeb11aa78 0x9ffd3e53 0x55d9525b // method \"create(uint64,uint64)void\", method \"addToWhitelist(account)void\", method \"removeFromWhitelist(account)void\", method \"mint(account,uint64)void\", method \"validateTransfer(account,account,uint64)bool\", method \"checkWhitelist(account)uint64\", method \"get_total_minted()uint64\", method \"get_max_supply()uint64\", method \"updateOwner(account)void\", method \"optInToAsset()void\", method \"fundContract(uint64)void\"",
      "defined_out": [
        "Method(addToWhitelist(account)void)",
        "Method(checkWhitelist(account)uint64)",
        "Method(create(uint64,uint64)void)",
        "Method(fundContract(uint64)void)",
        "Method(get_max_supply()uint64)",
        "Method(get_total_minted()uint64)",
        "Method(mint(account,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(removeFromWhitelist(account)void)",
        "Method(updateOwner(account)void)",
        "Method(validateTransfer(account,account,uint64)bool)"
      ],
      "stack_out": [
        "Method(create(uint64,uint64)void)",
        "Method(addToWhitelist(account)void)",
        "Method(removeFromWhitelist(account)void)",
        "Method(mint(account,uint64)void)",
        "Method(validateTransfer(account,account,uint64)bool)",
        "Method(checkWhitelist(account)uint64)",
        "Method(get_total_minted()uint64)",
        "Method(get_max_supply()uint64)",
        "Method(updateOwner(account)void)",
        "Method(optInToAsset()void)",
        "Method(fundContract(uint64)void)"
      ]
    },
    "124": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addToWhitelist(account)void)",
        "Method(checkWhitelist(account)uint64)",
        "Method(create(uint64,uint64)void)",
        "Method(fundContract(uint64)void)",
        "Method(get_max_supply()uint64)",
        "Method(get_total_minted()uint64)",
        "Method(mint(account,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(removeFromWhitelist(account)void)",
        "Method(updateOwner(account)void)",
        "Method(validateTransfer(account,account,uint64)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(uint64,uint64)void)",
        "Method(addToWhitelist(account)void)",
        "Method(removeFromWhitelist(account)void)",
        "Method(mint(account,uint64)void)",
        "Method(validateTransfer(account,account,uint64)bool)",
        "Method(checkWhitelist(account)uint64)",
        "Method(get_total_minted()uint64)",
        "Method(get_max_supply()uint64)",
        "Method(updateOwner(account)void)",
        "Method(optInToAsset()void)",
        "Method(fundContract(uint64)void)",
        "tmp%2#0"
      ]
    },
    "127": {
      "op": "match main_create_route@3 main_addToWhitelist_route@4 main_removeFromWhitelist_route@5 main_mint_route@6 main_validateTransfer_route@7 main_checkWhitelist_route@8 main_get_total_minted_route@9 main_get_max_supply_route@10 main_updateOwner_route@11 main_optInToAsset_route@12 main_fundContract_route@13",
      "stack_out": []
    },
    "151": {
      "block": "main_after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "152": {
      "op": "return",
      "stack_out": []
    },
    "153": {
      "block": "main_fundContract_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "155": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "156": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "157": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "159": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "160": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "163": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "164": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.fundContract",
      "op": "callsub fundContract",
      "stack_out": []
    },
    "167": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "168": {
      "op": "return",
      "stack_out": []
    },
    "169": {
      "block": "main_optInToAsset_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "171": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "172": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "173": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "175": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "176": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.optInToAsset",
      "op": "callsub optInToAsset"
    },
    "179": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "op": "return",
      "stack_out": []
    },
    "181": {
      "block": "main_updateOwner_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "183": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "184": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "185": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "187": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "188": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "191": {
      "op": "btoi",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "192": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "194": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.updateOwner",
      "op": "callsub updateOwner",
      "stack_out": []
    },
    "197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "198": {
      "op": "return",
      "stack_out": []
    },
    "199": {
      "block": "main_get_max_supply_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "201": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "202": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "203": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "205": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "206": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.get_max_supply",
      "op": "callsub get_max_supply",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "209": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "210": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "211": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "212": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "213": {
      "op": "log",
      "stack_out": []
    },
    "214": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    },
    "216": {
      "block": "main_get_total_minted_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "218": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "219": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "220": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "222": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "223": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.get_total_minted",
      "op": "callsub get_total_minted",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "226": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "227": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "229": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "232": {
      "op": "return",
      "stack_out": []
    },
    "233": {
      "block": "main_checkWhitelist_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "235": {
      "op": "!",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "236": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "237": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "239": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "240": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "243": {
      "op": "btoi",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "244": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "246": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.checkWhitelist",
      "op": "callsub checkWhitelist",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "249": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "250": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "251": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "252": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "253": {
      "op": "log",
      "stack_out": []
    },
    "254": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "255": {
      "op": "return",
      "stack_out": []
    },
    "256": {
      "block": "main_validateTransfer_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "258": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "259": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "260": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "262": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "263": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "266": {
      "op": "btoi",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "267": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "269": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%4#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "272": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "273": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%33#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "275": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%33#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%35#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "278": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "279": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.validateTransfer",
      "op": "callsub validateTransfer",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "282": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "285": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "286": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "288": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "289": {
      "op": "bytec_2 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "290": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "291": {
      "op": "concat",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "292": {
      "op": "log",
      "stack_out": []
    },
    "293": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "294": {
      "op": "return",
      "stack_out": []
    },
    "295": {
      "block": "main_mint_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "297": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "298": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "299": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "301": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "302": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "305": {
      "op": "btoi",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "306": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "308": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "311": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "312": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.mint",
      "op": "callsub mint",
      "stack_out": []
    },
    "315": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "316": {
      "op": "return",
      "stack_out": []
    },
    "317": {
      "block": "main_removeFromWhitelist_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "319": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "320": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "321": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "323": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "324": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "327": {
      "op": "btoi",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "328": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "330": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.removeFromWhitelist",
      "op": "callsub removeFromWhitelist",
      "stack_out": []
    },
    "333": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "334": {
      "op": "return",
      "stack_out": []
    },
    "335": {
      "block": "main_addToWhitelist_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "337": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "338": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "339": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "341": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "342": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "345": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "346": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "348": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.addToWhitelist",
      "op": "callsub addToWhitelist",
      "stack_out": []
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "352": {
      "op": "return",
      "stack_out": []
    },
    "353": {
      "block": "main_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "355": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "356": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "357": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "359": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "360": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "361": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "364": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "365": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "368": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "369": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.create",
      "op": "callsub create",
      "stack_out": []
    },
    "372": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "373": {
      "op": "return",
      "stack_out": []
    },
    "374": {
      "block": "main_bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "376": {
      "op": "switch main_after_if_else@20 main_optIn@17",
      "stack_out": []
    },
    "382": {
      "op": "b main_after_if_else@20"
    },
    "385": {
      "block": "main_optIn@17",
      "stack_in": [],
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "387": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "388": {
      "callsub": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.optIn",
      "op": "callsub optIn"
    },
    "391": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "392": {
      "op": "return",
      "stack_out": []
    },
    "393": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.create",
      "params": {
        "assetId#0": "uint64",
        "maxSupply#0": "uint64"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "396": {
      "op": "bytec 4 // \"asa_id\"",
      "defined_out": [
        "\"asa_id\""
      ],
      "stack_out": [
        "\"asa_id\""
      ]
    },
    "398": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"asa_id\"",
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "\"asa_id\"",
        "assetId#0 (copy)"
      ]
    },
    "400": {
      "op": "app_global_put",
      "stack_out": []
    },
    "401": {
      "op": "bytec 5 // \"max_supply\"",
      "defined_out": [
        "\"max_supply\""
      ],
      "stack_out": [
        "\"max_supply\""
      ]
    },
    "403": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"max_supply\"",
        "maxSupply#0 (copy)"
      ],
      "stack_out": [
        "\"max_supply\"",
        "maxSupply#0 (copy)"
      ]
    },
    "405": {
      "op": "app_global_put",
      "stack_out": []
    },
    "406": {
      "op": "bytec_3 // \"total_minted\"",
      "defined_out": [
        "\"total_minted\""
      ],
      "stack_out": [
        "\"total_minted\""
      ]
    },
    "407": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total_minted\"",
        "0"
      ],
      "stack_out": [
        "\"total_minted\"",
        "0"
      ]
    },
    "408": {
      "op": "app_global_put",
      "stack_out": []
    },
    "409": {
      "op": "bytec_0 // \"owner\"",
      "defined_out": [
        "\"owner\""
      ],
      "stack_out": [
        "\"owner\""
      ]
    },
    "410": {
      "op": "txn Sender",
      "defined_out": [
        "\"owner\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"owner\"",
        "new_state_value%0#0"
      ]
    },
    "412": {
      "op": "app_global_put",
      "stack_out": []
    },
    "413": {
      "retsub": true,
      "op": "retsub"
    },
    "414": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.optIn",
      "params": {},
      "block": "optIn",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "416": {
      "op": "bytec_1 // \"whitelisted\"",
      "defined_out": [
        "\"whitelisted\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"whitelisted\""
      ]
    },
    "417": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"whitelisted\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"whitelisted\"",
        "0"
      ]
    },
    "418": {
      "op": "app_local_put",
      "stack_out": []
    },
    "419": {
      "retsub": true,
      "op": "retsub"
    },
    "420": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.addToWhitelist",
      "params": {
        "account#0": "bytes"
      },
      "block": "addToWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "423": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "425": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "426": {
      "op": "bytec_0 // \"owner\"",
      "defined_out": [
        "\"owner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"owner\""
      ]
    },
    "427": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "428": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "429": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "430": {
      "error": "Only owner can add to whitelist",
      "op": "assert // Only owner can add to whitelist",
      "stack_out": []
    },
    "431": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "433": {
      "op": "bytec_1 // \"whitelisted\"",
      "defined_out": [
        "\"whitelisted\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"whitelisted\""
      ]
    },
    "434": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"whitelisted\"",
        "1",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"whitelisted\"",
        "1"
      ]
    },
    "435": {
      "op": "app_local_put",
      "stack_out": []
    },
    "436": {
      "retsub": true,
      "op": "retsub"
    },
    "437": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.removeFromWhitelist",
      "params": {
        "account#0": "bytes"
      },
      "block": "removeFromWhitelist",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "440": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "442": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "443": {
      "op": "bytec_0 // \"owner\"",
      "defined_out": [
        "\"owner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"owner\""
      ]
    },
    "444": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "445": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "446": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "447": {
      "error": "Only owner can remove from whitelist",
      "op": "assert // Only owner can remove from whitelist",
      "stack_out": []
    },
    "448": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "450": {
      "op": "bytec_1 // \"whitelisted\"",
      "defined_out": [
        "\"whitelisted\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "\"whitelisted\""
      ]
    },
    "451": {
      "op": "intc_0 // 0",
      "stack_out": [
        "account#0 (copy)",
        "\"whitelisted\"",
        "0"
      ]
    },
    "452": {
      "op": "app_local_put",
      "stack_out": []
    },
    "453": {
      "retsub": true,
      "op": "retsub"
    },
    "454": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.mint",
      "params": {
        "recipient#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "mint",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "457": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "459": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "460": {
      "op": "bytec_0 // \"owner\"",
      "defined_out": [
        "\"owner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"owner\""
      ]
    },
    "461": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "462": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "463": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "464": {
      "error": "Only owner can mint",
      "op": "assert // Only owner can mint",
      "stack_out": []
    },
    "465": {
      "op": "frame_dig -2",
      "defined_out": [
        "recipient#0 (copy)"
      ],
      "stack_out": [
        "recipient#0 (copy)"
      ]
    },
    "467": {
      "op": "intc_0 // 0",
      "stack_out": [
        "recipient#0 (copy)",
        "0"
      ]
    },
    "468": {
      "op": "bytec_1 // \"whitelisted\"",
      "defined_out": [
        "\"whitelisted\"",
        "0",
        "recipient#0 (copy)"
      ],
      "stack_out": [
        "recipient#0 (copy)",
        "0",
        "\"whitelisted\""
      ]
    },
    "469": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "470": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "471": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "1"
      ]
    },
    "472": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "473": {
      "error": "Recipient not whitelisted",
      "op": "assert // Recipient not whitelisted",
      "stack_out": []
    },
    "474": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "475": {
      "op": "bytec_3 // \"total_minted\"",
      "defined_out": [
        "\"total_minted\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_minted\""
      ]
    },
    "476": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "477": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "478": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "480": {
      "op": "+",
      "defined_out": [
        "newTotal#0"
      ],
      "stack_out": [
        "newTotal#0"
      ]
    },
    "481": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newTotal#0",
        "0"
      ]
    },
    "482": {
      "op": "bytec 5 // \"max_supply\"",
      "defined_out": [
        "\"max_supply\"",
        "0",
        "newTotal#0"
      ],
      "stack_out": [
        "newTotal#0",
        "0",
        "\"max_supply\""
      ]
    },
    "484": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "newTotal#0"
      ],
      "stack_out": [
        "newTotal#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "485": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newTotal#0",
        "maybe_value%3#0"
      ]
    },
    "486": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%3#0",
        "newTotal#0",
        "newTotal#0 (copy)"
      ],
      "stack_out": [
        "newTotal#0",
        "maybe_value%3#0",
        "newTotal#0 (copy)"
      ]
    },
    "488": {
      "op": ">=",
      "defined_out": [
        "newTotal#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "newTotal#0",
        "tmp%3#0"
      ]
    },
    "489": {
      "error": "Would exceed max supply",
      "op": "assert // Would exceed max supply",
      "stack_out": [
        "newTotal#0"
      ]
    },
    "490": {
      "op": "bytec_3 // \"total_minted\"",
      "stack_out": [
        "newTotal#0",
        "\"total_minted\""
      ]
    },
    "491": {
      "op": "swap",
      "stack_out": [
        "\"total_minted\"",
        "newTotal#0"
      ]
    },
    "492": {
      "op": "app_global_put",
      "stack_out": []
    },
    "493": {
      "op": "itxn_begin"
    },
    "494": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "495": {
      "op": "bytec 4 // \"asa_id\"",
      "defined_out": [
        "\"asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa_id\""
      ]
    },
    "497": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "498": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "499": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "amount#0 (copy)"
      ]
    },
    "501": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "503": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%4#0",
        "recipient#0 (copy)"
      ]
    },
    "505": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "507": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "509": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "510": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "512": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "513": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "515": {
      "op": "itxn_submit"
    },
    "516": {
      "retsub": true,
      "op": "retsub"
    },
    "517": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.validateTransfer",
      "params": {
        "from#0": "bytes",
        "to#0": "bytes",
        "amount#0": "uint64"
      },
      "block": "validateTransfer",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "520": {
      "op": "frame_dig -2",
      "defined_out": [
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)"
      ]
    },
    "522": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "0"
      ]
    },
    "523": {
      "op": "bytec_1 // \"whitelisted\"",
      "defined_out": [
        "\"whitelisted\"",
        "0",
        "to#0 (copy)"
      ],
      "stack_out": [
        "to#0 (copy)",
        "0",
        "\"whitelisted\""
      ]
    },
    "524": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "525": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "526": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "1"
      ]
    },
    "527": {
      "op": "==",
      "defined_out": [
        "isWhitelisted#0"
      ],
      "stack_out": [
        "isWhitelisted#0"
      ]
    },
    "528": {
      "error": "Recipient must be whitelisted",
      "op": "assert // Recipient must be whitelisted",
      "stack_out": []
    },
    "529": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "530": {
      "retsub": true,
      "op": "retsub"
    },
    "531": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.checkWhitelist",
      "params": {
        "account#0": "bytes"
      },
      "block": "checkWhitelist",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "534": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)"
      ]
    },
    "536": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0"
      ]
    },
    "537": {
      "op": "bytec_1 // \"whitelisted\"",
      "defined_out": [
        "\"whitelisted\"",
        "0",
        "account#0 (copy)"
      ],
      "stack_out": [
        "account#0 (copy)",
        "0",
        "\"whitelisted\""
      ]
    },
    "538": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "539": {
      "error": "check LocalState exists",
      "op": "assert // check LocalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "540": {
      "retsub": true,
      "op": "retsub"
    },
    "541": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.get_total_minted",
      "params": {},
      "block": "get_total_minted",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "542": {
      "op": "bytec_3 // \"total_minted\"",
      "defined_out": [
        "\"total_minted\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total_minted\""
      ]
    },
    "543": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "544": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "545": {
      "retsub": true,
      "op": "retsub"
    },
    "546": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.get_max_supply",
      "params": {},
      "block": "get_max_supply",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "547": {
      "op": "bytec 5 // \"max_supply\"",
      "defined_out": [
        "\"max_supply\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"max_supply\""
      ]
    },
    "549": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "550": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "551": {
      "retsub": true,
      "op": "retsub"
    },
    "552": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.updateOwner",
      "params": {
        "newOwner#0": "bytes"
      },
      "block": "updateOwner",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "555": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "557": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "558": {
      "op": "bytec_0 // \"owner\"",
      "defined_out": [
        "\"owner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"owner\""
      ]
    },
    "559": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "560": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "561": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "562": {
      "error": "Only current owner can update owner",
      "op": "assert // Only current owner can update owner",
      "stack_out": []
    },
    "563": {
      "op": "bytec_0 // \"owner\"",
      "stack_out": [
        "\"owner\""
      ]
    },
    "564": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"owner\"",
        "newOwner#0 (copy)"
      ],
      "stack_out": [
        "\"owner\"",
        "newOwner#0 (copy)"
      ]
    },
    "566": {
      "op": "app_global_put",
      "stack_out": []
    },
    "567": {
      "retsub": true,
      "op": "retsub"
    },
    "568": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.optInToAsset",
      "params": {},
      "block": "optInToAsset",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "569": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "570": {
      "op": "bytec 4 // \"asa_id\"",
      "defined_out": [
        "\"asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asa_id\""
      ]
    },
    "572": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "573": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "574": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "576": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "577": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%0#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "579": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "581": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "583": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "584": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "586": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "587": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "589": {
      "op": "itxn_submit"
    },
    "590": {
      "retsub": true,
      "op": "retsub"
    },
    "591": {
      "subroutine": "smart_contracts/asa_controller/contract.algo.ts::SmartASAController.fundContract",
      "params": {
        "amount#0": "uint64"
      },
      "block": "fundContract",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "594": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "596": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "597": {
      "op": "bytec_0 // \"owner\"",
      "defined_out": [
        "\"owner\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"owner\""
      ]
    },
    "598": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "599": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "600": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "601": {
      "error": "Only owner can fund contract",
      "op": "assert // Only owner can fund contract",
      "stack_out": []
    },
    "602": {
      "retsub": true,
      "op": "retsub"
    }
  }
}